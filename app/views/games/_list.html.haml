%li.game
  - decorator = GameDecorator.new game
  - sente_decorator = game.sente_user ? UserDecorator.new(game.sente_user) : nil
  - gote_decorator = game.gote_user ? UserDecorator.new(game.gote_user) : nil
  - won_decorator = game.won_user ? UserDecorator.new(game.won_user) : nil
  .game_info
    %h3.game_users<
      - if sente_decorator
        = sente_decorator.image
      vs
      - if gote_decorator
        = gote_decorator.image
    .game_content
      = decorator.name(true)
      %br
      %span.mobile_hide
        = t('game.time_span')
      = decorator.time_span
      \/
      %span.mobile_hide
        = Game.human_attribute_name(:number)
        = decorator.number
        \/
      = Game.human_attribute_name 'comments'
      = game.comments.count
  .game_status
    - if game.playing?
      %span.playing
        = t('game.status.playing')
    - else
      %span.finished
        = t('game.status.finished')
    - if game.of_user? current_user
      = link_to t('actions.destroy'), game, confirm: t('confirms.are_you_sure_'), method: :delete, 'data-remote' => true, class: :delete
    - if won_decorator
      %br
      = t('user.games.won', user: won_decorator.name(true)).html_safe
    - else
      - your_turn = false
      - last_movement = game.movements.last
      - if last_movement
        - if current_user == game.sente_user && last_movement.gote?
          - your_turn = true
        - elsif current_user == game.gote_user && last_movement.sente?
          - your_turn = true
      - if your_turn
        %br
        %span.my_turn
          = t('notices.its_your_turn')
